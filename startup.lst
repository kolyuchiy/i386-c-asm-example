Turbo Assembler	 Version 4.1	    07/05/03 21:34:07	    Page 1
startup.asm



      1					 ; FOO_OS -- учебная операционная система
      2					 ; (c) 2003, Kolia Morev <kolia39@mail.ru>
      3					 ;
      4					 ; Начальная загрузка ОС.
      5
      6					 .386p
      7
      8					 include startup.mac
1     9					 ; FOO_OS -- учебная операционная система
1    10					 ; (c) 2003, Kolia Morev <kolia39@mail.ru>
1    11					 ;
1    12					 ; Различные макросы
1    13
1    14					 ; Преобразование адреса вида сегмент:смещение
1    15					 ; в физический	адрес. Результат -- в eax.
1    16					 physical_addr	 macro	 segaddr,offsaddr
1    17						 xor	 eax,eax
1    18						 mov	 ax,segaddr
1    19						 shl	 eax,4
1    20						 add	 ax,offset offsaddr
1    21							 endm
1    22
1    23					 ; Установка полей base* дескриптора.
1    24					 ; descr -- адрес дескриптора
1    25					 ; eax -- физический адрес
1    26					 set_descr_base	 macro	 descr
1    27						 mov	 descr.base_l,ax
1    28						 shr	 eax,16
1    29						 mov	 descr.base_m,al
1    30						 mov	 descr.base_h,ah
1    31							 endm
1    32
1    33					 ; Задержка
1    34					 delay		 macro
1    35						 jmp	 $+2
1    36							 endm
1    37
1    38					 ; Описания системных структур
1    39					 ;  и их значения по умолчанию.
1    40
1    41					 ; Дескриптор сегмента
1    42	00000000			 descr	 struc
1    43	00000000  01*(0000)		  limit	  dw	  0	  ; Граница (биты 0..15)
1    44	00000002  01*(0000)		  base_l  dw	  0	  ; База (биты 0..15)
1    45	00000004  01*(00)		  base_m  db	  0	  ; База (биты 16..23)
1    46	00000005  01*(00)		  attr_1  db	  0	  ; Байт атрибутов 1
1    47	00000006  01*(00)		  attr_2  db	  0	  ; Граница (биты 16..19) и атрибуты 2
1    48	00000007  01*(00)		  base_h  db	  0	  ; База (биты 24..31)
1    49	00000008			 descr	 ends
1    50
1    51					 ; Шлюз	прерывания
1    52	00000000			 intr	 struc
1    53	00000000  01*(0000)		  offs_l dw	 0
1    54	00000002  01*(0000)		  sel	 dw	 0
1    55	00000004  01*(0000)		  attr	 dw	 0
1    56	00000006  01*(0000)		  offs_h dw	 0
1    57	00000008			 intr	 ends
Turbo Assembler	 Version 4.1	    07/05/03 21:34:07	    Page 2
startup.asm



1    58
1    59
1    60					 ;
1    61					 perehod_v_prot_mode	 macro
1    62					 ; Установка поля базы дескрипторов
1    63						 physical_addr	 dgroup,0
1    64						 set_descr_base	 gdt_data
1    65
1    66						 physical_addr	 _text,0
1    67						 set_descr_base	 gdt_code
1    68
1    69						 physical_addr	 _stack,0
1    70						 set_descr_base	 gdt_stack
1    71
1    72					 ; Подготовка псевдодескриптора	и загрузка регистра GDTR
1    73						 physical_addr	 dgroup,gdt
1    74						 set_descr_base	 tmpdescr
1    75						 mov	 tmpdescr.limit,gdt_size-1
1    76						 lgdt	 tmpdescr
1    77
1    78					 ; Подготовка к	переходу в защищённый режим
1    79						 cli			 ; Запрет аппаратных прерываний
1    80						 mov	 al,8fh		 ; Запрет NMI
1    81						 out	 70h,al		 ; Порт	CMOS
1    82						 delay
1    83						 mov	 al,05h		 ; Байт	состояния отключения 05:
1    84						 out	 71h,al		 ; возврат в программу и
1    85									 ; перепрограммир. контроллеров
1    86						 mov	 ax,40h		 ; Загрузка в область
1    87						 mov	 es,ax		 ; данных BIOS адреса возврата
1    88									 ; в программу
1    89						 mov	 word ptr es:[67h],offset return
1    90						 mov	 word ptr es:[69h],cs
1    91
1    92					 ; Перепрограммирование	ведущего контроллера прерываний
1    93					 ; Базовый вектор теперь 20h
1    94						 mov	 dx,20h		 ; Порт	контроллера
1    95						 mov	 al,11h		 ; СКИ1: будет СКИ3
1    96						 out	 dx,al
1    97						 delay
1    98						 inc	 dx		 ; Второй порт контроллера
1    99						 mov	 al,20h		 ; СКИ2: базовый вектор
1   100						 out	 dx,al
1   101						 delay
1   102						 mov	 al,4		 ; СКИ3: ведомый подключен к уровню 2
1   103						 out	 dx,al
1   104						 delay
1   105						 mov	 al,1		 ; СКИ4: 80x86,	требуется EOI
1   106						 out	 dx,al
1   107						 mov	 al,0fch	 ; Маска прерываний
1   108						 out	 dx,al
1   109
1   110					 ; Инициализация ведомого контроллера
1   111					 ; Базовый вектор теперь 28h
1   112						 mov	 dx,0a0h	 ; Порт	контроллера
1   113						 mov	 al,11h		 ; СКИ1: будет СКИ3
1   114						 out	 dx,al
Turbo Assembler	 Version 4.1	    07/05/03 21:34:07	    Page 3
startup.asm



1   115						 delay
1   116						 inc	 dx		 ; Второй порт контроллера
1   117						 mov	 al,28h		 ; СКИ2: базовый вектор
1   118						 out	 dx,al
1   119						 delay
1   120						 mov	 al,2		 ; СКИ3: ведомый подключен к уровню 2
1   121						 out	 dx,al
1   122						 delay
1   123						 mov	 al,1		 ; СКИ4: 80x86,	требуется EOI
1   124						 out	 dx,al
1   125						 delay
1   126
1   127					 ; Запретить все прерывания в ведомом контроллере
1   128						 mov	 dx,0a1h	 ; Порт	ведомого контроллера
1   129						 mov	 al,0ffh	 ; Маска прерываний -
1   130						 out	 dx,al		 ; замаскируем все прерывания
1   131
1   132					 ; Загрузка IDTR
1   133						 physical_addr	 dgroup,idt
1   134						 set_descr_base	 tmpdescr
1   135						 mov	 tmpdescr.limit,idt_size-1
1   136						 lidt	 tmpdescr
1   137
1   138					 ; Откроем линию A20
1   139						 mov	 al,0d1h	 ; Команда управления
1   140						 out	 64h,al		 ;  линией A20
1   141						 mov	 al,0dfh	 ; Код открытия
1   142						 out	 60h,al		 ;  линии A20
1   143								 endm
1   144
1   145					 perehod_v_real_mode	 macro
1   146					 ; Организация перехода	в реальный режим
1   147					 ; Закроем линию A20
1   148						 mov	 al,0d1h
1   149						 out	 64h,al
1   150						 mov	 al,0ddh
1   151						 out	 60h,al
1   152
1   153					 ; Переключим режим процессора
1   154						 mov	 al,0feh	 ; Переходим в реальный	режим
1   155						 out	 64h,al		 ; засылкой кода feh в порт 64h
1   156						 hlt			 ; Останов в ожидании сброса
1   157
1   158					 ; Теперь процессор снова работает в реальном режиме
1   159					 ; Восстановим операционную среду реального режима
1   160					 return: mov	 ax,dgroup
1   161						 mov	 ds,ax
1   162						 mov	 ax,_stack
1   163						 mov	 ss,ax
1   164						 mov	 sp,size _stack
1   165
1   166					 ; Размаскируем	прерывания в контроллере
1   167						 mov	 al,0b8h
1   168						 out	 21h,al
1   169						 mov	 al,9dh
1   170						 out	 0a1h,al
1   171
Turbo Assembler	 Version 4.1	    07/05/03 21:34:07	    Page 4
startup.asm



1   172					 ; Разрешим аппаратные и немаскируемые прерывания
1   173						 sti
1   174						 mov	 al,0		 ; Разрешим NMI
1   175						 out	 70h,al
1   176								 endm
1   177
    178
    179					 ; Из main.c
    180					 extrn	C main:proc
    181
    182					 DGROUP	       group	    _DATA,_BSS
    183						 assume	       cs:_TEXT,ds:DGROUP
    184	    0000			 _DATA	      segment word public use16	'DATA'
    185
    186	    0000			 gdt	    label  word
    187					 ;
    188	    0000  0000 0000 00 00 00  +	 gdt_null   descr  <0,0,0,0,0,0>
    189		  00
    190		  =0008			 sel_code   = 10q
    191	    0008  FFFF 0000 00 9A 00  +	 gdt_code   descr  <0FFFFh,,,10011010b>
    192		  00
    193		  =0010			 sel_data   = 20q
    194	    0010  FFFF 0000 00 92 00  +	 gdt_data   descr  <0FFFFh,,,10010010b>
    195		  00
    196		  =0018			 sel_stack  = 30q
    197	    0018  01FF 0000 00 92 00  +	 gdt_stack  descr  <size _stack-1,,,10010010b>
    198		  00
    199		  =0020			 sel_screen = 40q
    200	    0020  0F9F 8000 0B F2 00  +	 gdt_screen descr  <3999,8000h,0bh,0f2h>
    201		  00
    202					 ;
    203		  =0028			 gdt_size = $ -	gdt
    204
    205	    0028			 idt  label word
    206	    0028  0100*(0000 0000 0000+	      intr  256	dup (<>)
    207		  0000)
    208		  =0800			 idt_size = 256	* size intr
    209
    210					 ; Поля	данных программы
    211	    0828  0000 0000 00 00 00  +	 tmpdescr	 descr <>
    212		  00
    213	    0830  2A 20	65 78 69 74 3A+	 message_exit	 db    '* exit:	PeaJIbHbIu Pe>|<uM.$'
    214		  20 50	65 61 4A 49 62+
    215		  48 62	49 75 20 50 65+
    216		  3E 7C	3C 75 4D 2E 24
    217
    218	    084C			 _DATA	 ends
    219
    220	    0000			 _BSS	 segment word public use16 'BSS'
    221	    0000			 _BSS	 ends
    222
    223
    224	    0000			 _TEXT	 segment byte public use16 'CODE'
    225						 assume	cs:_TEXT,ds:DGROUP
    226
    227	    0000			 startup:
    228	    0000  B8 0000s			 mov	 ax,dgroup
Turbo Assembler	 Version 4.1	    07/05/03 21:34:07	    Page 5
startup.asm



    229	    0003  8E D8				 mov	 ds,ax
    230
    231						 perehod_v_prot_mode
1   232						 physical_addr	 dgroup,0
2   233	    0005  66| 33 C0			 xor	 eax,eax
2   234	    0008  B8 0000s			 mov	 ax,dgroup
2   235	    000B  66| C1 E0 04			 shl	 eax,4
2   236	    000F  05 0000			 add	 ax,offset 0
1   237						 set_descr_base	 gdt_data
2   238	    0012  A3 0012r			 mov	 gdt_data.base_l,ax
2   239	    0015  66| C1 E8 10			 shr	 eax,16
2   240	    0019  A2 0014r			 mov	 gdt_data.base_m,al
2   241	    001C  88 26	0017r			 mov	 gdt_data.base_h,ah
1   242						 physical_addr	 _text,0
2   243	    0020  66| 33 C0			 xor	 eax,eax
2   244	    0023  B8 0000s			 mov	 ax,_text
2   245	    0026  66| C1 E0 04			 shl	 eax,4
2   246	    002A  05 0000			 add	 ax,offset 0
1   247						 set_descr_base	 gdt_code
2   248	    002D  A3 000Ar			 mov	 gdt_code.base_l,ax
2   249	    0030  66| C1 E8 10			 shr	 eax,16
2   250	    0034  A2 000Cr			 mov	 gdt_code.base_m,al
2   251	    0037  88 26	000Fr			 mov	 gdt_code.base_h,ah
1   252						 physical_addr	 _stack,0
2   253	    003B  66| 33 C0			 xor	 eax,eax
2   254	    003E  B8 0000s			 mov	 ax,_stack
2   255	    0041  66| C1 E0 04			 shl	 eax,4
2   256	    0045  05 0000			 add	 ax,offset 0
1   257						 set_descr_base	 gdt_stack
2   258	    0048  A3 001Ar			 mov	 gdt_stack.base_l,ax
2   259	    004B  66| C1 E8 10			 shr	 eax,16
2   260	    004F  A2 001Cr			 mov	 gdt_stack.base_m,al
2   261	    0052  88 26	001Fr			 mov	 gdt_stack.base_h,ah
1   262						 physical_addr	 dgroup,gdt
2   263	    0056  66| 33 C0			 xor	 eax,eax
2   264	    0059  B8 0000s			 mov	 ax,dgroup
2   265	    005C  66| C1 E0 04			 shl	 eax,4
2   266	    0060  05 0000r			 add	 ax,offset gdt
1   267						 set_descr_base	 tmpdescr
2   268	    0063  A3 082Ar			 mov	 tmpdescr.base_l,ax
2   269	    0066  66| C1 E8 10			 shr	 eax,16
2   270	    006A  A2 082Cr			 mov	 tmpdescr.base_m,al
2   271	    006D  88 26	082Fr			 mov	 tmpdescr.base_h,ah
1   272	    0071  C7 06	0828r 0027		 mov	 tmpdescr.limit,gdt_size-1
1   273	    0077  0F 01	16 0828r		 lgdt	 tmpdescr
1   274	    007C  FA				 cli			 ; Запрет аппаратных прерываний
1   275	    007D  B0 8F				 mov	 al,8fh		 ; Запрет NMI
1   276	    007F  E6 70				 out	 70h,al		 ; Порт	CMOS
1   277						 delay
2   278	    0081  EB 00				 jmp	 $+2
1   279	    0083  B0 05				 mov	 al,05h		 ; Байт	состояния отключения 05:
1   280	    0085  E6 71				 out	 71h,al		 ; возврат в программу и
1   281	    0087  B8 0040			 mov	 ax,40h		 ; Загрузка в область
1   282	    008A  8E C0				 mov	 es,ax		 ; данных BIOS адреса возврата
1   283	    008C  26: C7 06 0067 0132r		 mov	 word ptr es:[67h],offset return
1   284	    0093  26: 8C 0E 0069		 mov	 word ptr es:[69h],cs
1   285	    0098  BA 0020			 mov	 dx,20h		 ; Порт	контроллера
Turbo Assembler	 Version 4.1	    07/05/03 21:34:07	    Page 6
startup.asm



1   286	    009B  B0 11				 mov	 al,11h		 ; СКИ1: будет СКИ3
1   287	    009D  EE				 out	 dx,al
1   288						 delay
2   289	    009E  EB 00				 jmp	 $+2
1   290	    00A0  42				 inc	 dx		 ; Второй порт контроллера
1   291	    00A1  B0 20				 mov	 al,20h		 ; СКИ2: базовый вектор
1   292	    00A3  EE				 out	 dx,al
1   293						 delay
2   294	    00A4  EB 00				 jmp	 $+2
1   295	    00A6  B0 04				 mov	 al,4		 ; СКИ3: ведомый подключен к уровню 2
1   296	    00A8  EE				 out	 dx,al
1   297						 delay
2   298	    00A9  EB 00				 jmp	 $+2
1   299	    00AB  B0 01				 mov	 al,1		 ; СКИ4: 80x86,	требуется EOI
1   300	    00AD  EE				 out	 dx,al
1   301	    00AE  B0 FC				 mov	 al,0fch	 ; Маска прерываний
1   302	    00B0  EE				 out	 dx,al
1   303	    00B1  BA 00A0			 mov	 dx,0a0h	 ; Порт	контроллера
1   304	    00B4  B0 11				 mov	 al,11h		 ; СКИ1: будет СКИ3
1   305	    00B6  EE				 out	 dx,al
1   306						 delay
2   307	    00B7  EB 00				 jmp	 $+2
1   308	    00B9  42				 inc	 dx		 ; Второй порт контроллера
1   309	    00BA  B0 28				 mov	 al,28h		 ; СКИ2: базовый вектор
1   310	    00BC  EE				 out	 dx,al
1   311						 delay
2   312	    00BD  EB 00				 jmp	 $+2
1   313	    00BF  B0 02				 mov	 al,2		 ; СКИ3: ведомый подключен к уровню 2
1   314	    00C1  EE				 out	 dx,al
1   315						 delay
2   316	    00C2  EB 00				 jmp	 $+2
1   317	    00C4  B0 01				 mov	 al,1		 ; СКИ4: 80x86,	требуется EOI
1   318	    00C6  EE				 out	 dx,al
1   319						 delay
2   320	    00C7  EB 00				 jmp	 $+2
1   321	    00C9  BA 00A1			 mov	 dx,0a1h	 ; Порт	ведомого контроллера
1   322	    00CC  B0 FF				 mov	 al,0ffh	 ; Маска прерываний -
1   323	    00CE  EE				 out	 dx,al		 ; замаскируем все прерывания
1   324						 physical_addr	 dgroup,idt
2   325	    00CF  66| 33 C0			 xor	 eax,eax
2   326	    00D2  B8 0000s			 mov	 ax,dgroup
2   327	    00D5  66| C1 E0 04			 shl	 eax,4
2   328	    00D9  05 0028r			 add	 ax,offset idt
1   329						 set_descr_base	 tmpdescr
2   330	    00DC  A3 082Ar			 mov	 tmpdescr.base_l,ax
2   331	    00DF  66| C1 E8 10			 shr	 eax,16
2   332	    00E3  A2 082Cr			 mov	 tmpdescr.base_m,al
2   333	    00E6  88 26	082Fr			 mov	 tmpdescr.base_h,ah
1   334	    00EA  C7 06	0828r 07FF		 mov	 tmpdescr.limit,idt_size-1
1   335	    00F0  0F 01	1E 0828r		 lidt	 tmpdescr
1   336	    00F5  B0 D1				 mov	 al,0d1h	 ; Команда управления
1   337	    00F7  E6 64				 out	 64h,al		 ;  линией A20
1   338	    00F9  B0 DF				 mov	 al,0dfh	 ; Код открытия
1   339	    00FB  E6 60				 out	 60h,al		 ;  линии A20
    340
    341					 ; Переход в защищённый	режим
    342	    00FD  0F 20	C0			 mov	 eax,cr0
Turbo Assembler	 Version 4.1	    07/05/03 21:34:07	    Page 7
startup.asm



    343	    0100  66| 83 C8 01			 or	 eax,1b
    344	    0104  0F 22	C0			 mov	 cr0,eax
    345
    346					 ; Теперь процессор работает в защищённом режиме
    347					 ; Загрузка в CS селектора сегмента команд,
    348					 ; перезагрузка	буфера команд
    349	    0107  EA				 db	 0eah
    350	    0108  010Cr				 dw	 offset	continue
    351	    010A  0008				 dw	 sel_code
    352	    010C			 continue:
    353
    354					 ; Инициализируем сегментные регистры
    355	    010C  B8 0010			 mov	 ax,sel_data
    356	    010F  8E D8				 mov	 ds,ax
    357	    0111  B8 0018			 mov	 ax,sel_stack
    358	    0114  8E D0				 mov	 ss,ax
    359	    0116  B8 0020			 mov	 ax,sel_screen
    360	    0119  8E C0				 mov	 es,ax
    361	    011B  B8 0000			 mov	 ax,0
    362	    011E  8E E8				 mov	 gs,ax
    363	    0120  8E E0				 mov	 fs,ax
    364
    365					 ; Запускаем ядро ОС
    366	    0122  E8 0000e			 call	 main
    367
    368						 perehod_v_real_mode
1   369	    0125  B0 D1				 mov	 al,0d1h
1   370	    0127  E6 64				 out	 64h,al
1   371	    0129  B0 DD				 mov	 al,0ddh
1   372	    012B  E6 60				 out	 60h,al
1   373	    012D  B0 FE				 mov	 al,0feh	 ; Переходим в реальный	режим
1   374	    012F  E6 64				 out	 64h,al		 ; засылкой кода feh в порт 64h
1   375	    0131  F4				 hlt			 ; Останов в ожидании сброса
1   376	    0132  B8 0000s		 return: mov	 ax,dgroup
1   377	    0135  8E D8				 mov	 ds,ax
1   378	    0137  B8 0000s			 mov	 ax,_stack
1   379	    013A  8E D0				 mov	 ss,ax
1   380	    013C  BC 0200			 mov	 sp,size _stack
1   381	    013F  B0 B8				 mov	 al,0b8h
1   382	    0141  E6 21				 out	 21h,al
1   383	    0143  B0 9D				 mov	 al,9dh
1   384	    0145  E6 A1				 out	 0a1h,al
1   385	    0147  FB				 sti
1   386	    0148  B0 00				 mov	 al,0		 ; Разрешим NMI
1   387	    014A  E6 70				 out	 70h,al
    388
    389					 ; Проверим выполнение функций DOS и завершим программу
    390	    014C  B4 09				 mov	 ah,09h
    391	    014E  BA 0830r			 mov	 dx,offset message_exit
    392	    0151  CD 21				 int	 21h
    393	    0153  B8 4C00			 mov	 ax,4c00h
    394	    0156  CD 21				 int	 21h
    395
    396	    0158			 _TEXT	 ends
    397
    398	00000000			 _STACK	 segment stack 'stack'
    399						 org 200h
Turbo Assembler	 Version 4.1	    07/05/03 21:34:07	    Page 8
startup.asm



    400	00000200			 _STACK	 ends
    401
    402						 end	 startup
Turbo Assembler	 Version 4.1	    07/05/03 21:34:07	    Page 9
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "07/05/03"
??FILENAME			  Text	 "startup "
??TIME				  Text	 "21:34:07"
??VERSION			  Number 040A
@CPU				  Text	 0F8FH
@CURSEG				  Text	 _STACK
@FILENAME			  Text	 STARTUP
@WORDSIZE			  Text	 4
CONTINUE			  Near	 _TEXT:010C
GDT				  Word	 _DATA:0000
GDT_CODE			  Struct _DATA:0008 DESCR
GDT_DATA			  Struct _DATA:0010 DESCR
GDT_NULL			  Struct _DATA:0000 DESCR
GDT_SCREEN			  Struct _DATA:0020 DESCR
GDT_SIZE			  Number 0028
GDT_STACK			  Struct _DATA:0018 DESCR
IDT				  Word	 _DATA:0028
IDT_SIZE			  Number 0800
MAIN (_MAIN)			  Near	 ----:---- Extern
MESSAGE_EXIT			  Byte	 _DATA:0830
RETURN				  Near	 _TEXT:0132
SEL_CODE			  Number 0008
SEL_DATA			  Number 0010
SEL_SCREEN			  Number 0020
SEL_STACK			  Number 0018
STARTUP				  Near	 _TEXT:0000
TMPDESCR			  Struct _DATA:0828 DESCR

Macro Name

DELAY
PEREHOD_V_PROT_MODE
PEREHOD_V_REAL_MODE
PHYSICAL_ADDR
SET_DESCR_BASE

Structure Name			  Type	Offset

DESCR
 LIMIT				  Word	 0000
 BASE_L				  Word	 0002
 BASE_M				  Byte	 0004
 ATTR_1				  Byte	 0005
 ATTR_2				  Byte	 0006
 BASE_H				  Byte	 0007
INTR
 OFFS_L				  Word	 0000
 SEL				  Word	 0002
 ATTR				  Word	 0004
 OFFS_H				  Word	 0006
Turbo Assembler	 Version 4.1	    07/05/03 21:34:07	    Page 10
Symbol Table




Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _BSS				  16  0000 Word	  Public  BSS
  _DATA				  16  084C Word	  Public  DATA
_STACK				  32  0200 Para	  Stack	  STACK
_TEXT				  16  0158 Byte	  Public  CODE
